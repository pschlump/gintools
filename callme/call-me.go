package callme

// Do Not Edit This File -- It was authomatically generated by ./call-func/call-func (main.go)

// Generation Date: 2024-03-26 10:57:22
// Generation On: victoria.lan

// Copyright (C) Philip Schlump 2023.
// MIT Licensed
// BSD Licensed

import (
	"io"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/pschlump/gintools/data"
)

var gCfg *data.AppConfig
var logFilePtr io.WriteCloser = os.Stderr // var logFilePtr = os.Stderr

// func SetupCallDb(x *data.AppConfig, fp *os.File) {
func SetupCallDb(x *data.AppConfig, fp io.WriteCloser) {
	gCfg = x
	logFilePtr = fp
}

// func ResetLogFile(fp *os.File) {
func ResetLogFile(fp io.WriteCloser) {
	logFilePtr = fp
}

/* ============================================================================
{
	"FuncName": "q_admin_get_registration_token",
	"PList": [
		"p_user_id",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "token_registration",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 2882,
	"Line": "CREATE OR REPLACE FUNCTION q_admin_get_registration_token (  p_user_id uuid, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvQAdminGetRegistrationToken struct {
	StdErrorReturn
	TokenRegistration string `json:"token_registration,omitempty"`
}

// CallQAdminGetRegistrationToken will call q_admin_get_registration_token in the database.
func CallQAdminGetRegistrationToken(c *gin.Context, userId string) (rv RvQAdminGetRegistrationToken, err error) {

	stmt := "q_admin_get_registration_token (  $1, $2, $3 )"

	err = CallDatabaseFunction(c, &rv, stmt, ".!!", userId, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_register_admin",
	"PList": [
		"p_email",
		"p_pw",
		"p_hmac_password",
		"p_first_name",
		"p_last_name",
		"p_userdata_password",
		"p_secret",
		"p_admin_password",
		"p_specifed_role_name",
		"p_admin_user_id",
		"p_n6_flag"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "email_verify_token",
			"Type": "s"
		},
		{
			"Name": "require_2fa",
			"Type": "s"
		},
		{
			"Name": "tmp_token",
			"Type": "s"
		},
		{
			"Name": "secret_2fa",
			"Type": "s"
		},
		{
			"Name": "n6",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 4328,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_register_admin ( p_email varchar, p_pw varchar, p_hmac_password varchar, p_first_name varchar, p_last_name varchar, p_userdata_password varchar, p_secret varchar, p_admin_password varchar, p_specifed_role_name varchar, p_admin_user_id uuid, p_n6_flag varchar ) RETURNS text"
}
*/

type RvAuthRegisterAdmin struct {
	StdErrorReturn
	UserId           string `json:"user_id,omitempty"`
	EmailVerifyToken string `json:"email_verify_token,omitempty"`
	Require2Fa       string `json:"require_2fa,omitempty"`
	TmpToken         string `json:"tmp_token,omitempty"`
	Secret2Fa        string `json:"secret_2fa,omitempty"`
	N6               string `json:"n6,omitempty"`
}

// CallAuthRegisterAdmin will call q_auth_v1_register_admin in the database.
func CallAuthRegisterAdmin(c *gin.Context, email string, pw string, firstName string, lastName string, secret string, adminPassword string, specifedRoleName string, adminUserId string, n6Flag string) (rv RvAuthRegisterAdmin, err error) {

	stmt := "q_auth_v1_register_admin (  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!..!.....", email, pw, gCfg.EncryptionPassword, firstName, lastName, gCfg.UserdataPassword, secret, adminPassword, specifedRoleName, adminUserId, n6Flag)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_delete_user",
	"PList": [
		"p_user_id"
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 5065,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_delete_user ( p_user_id uuid ) RETURNS text"
}
*/

/* ============================================================================
{
	"FuncName": "q_auth_v1_change_password",
	"PList": [
		"p_email",
		"p_pw",
		"p_new_pw",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 5106,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_change_password ( p_email varchar, p_pw varchar, p_new_pw varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthChangePassword struct {
	StdErrorReturn
	FirstName string `json:"first_name,omitempty"`
	LastName  string `json:"last_name,omitempty"`
}

// CallAuthChangePassword will call q_auth_v1_change_password in the database.
func CallAuthChangePassword(c *gin.Context, email string, pw string, newPw string) (rv RvAuthChangePassword, err error) {

	stmt := "q_auth_v1_change_password (  $1, $2, $3, $4, $5 )"

	err = CallDatabaseFunction(c, &rv, stmt, "...!!", email, pw, newPw, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_setup_startup_one_time",
	"PList": [
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "db_name",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 724,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_setup_startup_one_time ( p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthSetupStartupOneTime struct {
	StdErrorReturn
	DbName string `json:"db_name,omitempty"`
}

// CallAuthSetupStartupOneTime will call q_auth_v1_setup_startup_one_time in the database.
func CallAuthSetupStartupOneTime(c *gin.Context) (rv RvAuthSetupStartupOneTime, err error) {

	stmt := "q_auth_v1_setup_startup_one_time (  $1, $2 )"

	err = CallDatabaseFunction(c, &rv, stmt, "!!", gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_n6_email_validate",
	"PList": [
		"p_email_verify_token",
		"p_flag"
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 3617,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_n6_email_validate ( p_email_verify_token uuid, p_flag varchar ) RETURNS text"
}
*/

/* ============================================================================
{
	"FuncName": "q_admin_create_client",
	"PList": [
		"p_client_name",
		"p_description",
		"p_role_name",
		"p_email_addr",
		"p_user_id",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "client_id",
			"Type": "s"
		},
		{
			"Name": "registration_token",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 2775,
	"Line": "CREATE OR REPLACE FUNCTION q_admin_create_client ( p_client_name varchar, p_description varchar, p_role_name varchar, p_email_addr varchar, p_user_id uuid, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvQAdminCreateClient struct {
	StdErrorReturn
	ClientId          string `json:"client_id,omitempty"`
	RegistrationToken string `json:"registration_token,omitempty"`
}

// CallQAdminCreateClient will call q_admin_create_client in the database.
func CallQAdminCreateClient(c *gin.Context, clientName string, description string, roleName string, emailAddr string, userId string) (rv RvQAdminCreateClient, err error) {

	stmt := "q_admin_create_client (  $1, $2, $3, $4, $5, $6, $7 )"

	err = CallDatabaseFunction(c, &rv, stmt, ".....!!", clientName, description, roleName, emailAddr, userId, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_validate_2fa_token",
	"PList": [
		"p_email",
		"p_tmp_token",
		"p_2fa_secret",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "auth_token",
			"Type": "s"
		},
		{
			"Name": "expires",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "privileges",
			"Type": "s"
		},
		{
			"Name": "secret_2fa",
			"Type": "s"
		},
		{
			"Name": "email_validated",
			"Type": "s"
		},
		{
			"Name": "x2fa_validated",
			"Type": "s"
		},
		{
			"Name": "acct_state",
			"Type": "s"
		},
		{
			"Name": "login_2fa_remain",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 7133,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_validate_2fa_token ( p_email varchar, p_tmp_token varchar, p_2fa_secret varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthValidate2FaToken struct {
	StdErrorReturn
	AuthToken      string `json:"auth_token,omitempty"`
	Expires        string `json:"expires,omitempty"`
	UserId         string `json:"user_id,omitempty"`
	Privileges     string `json:"privileges,omitempty"`
	Secret2Fa      string `json:"secret_2fa,omitempty"`
	EmailValidated string `json:"email_validated,omitempty"`
	X2faValidated  string `json:"x2fa_validated,omitempty"`
	AcctState      string `json:"acct_state,omitempty"`
	Login2FaRemain string `json:"login_2fa_remain,omitempty"`
}

// CallAuthValidate2FaToken will call q_auth_v1_validate_2fa_token in the database.
func CallAuthValidate2FaToken(c *gin.Context, email string, tmpToken string, x2faSecret string) (rv RvAuthValidate2FaToken, err error) {

	stmt := "q_auth_v1_validate_2fa_token (  $1, $2, $3, $4, $5 )"

	err = CallDatabaseFunction(c, &rv, stmt, "...!!", email, tmpToken, x2faSecret, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_qr_user_id_to_email",
	"PList": [
		"p_user_id",
		"p_userdata_password"
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 1512,
	"Line": "CREATE OR REPLACE FUNCTION q_qr_user_id_to_email ( p_user_id varchar, p_userdata_password varchar ) RETURNS text"
}
*/

/* ============================================================================
{
	"FuncName": "q_auth_v1_create_auth_token",
	"PList": [
		"p_email",
		"p_auth_token",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "auth_token",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 7336,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_create_auth_token ( p_email varchar, p_auth_token varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthCreateAuthToken struct {
	StdErrorReturn
	AuthToken string `json:"auth_token,omitempty"`
}

// CallAuthCreateAuthToken will call q_auth_v1_create_auth_token in the database.
func CallAuthCreateAuthToken(c *gin.Context, email string, authToken string) (rv RvAuthCreateAuthToken, err error) {

	stmt := "q_auth_v1_create_auth_token (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", email, authToken, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_create_use_token",
	"PList": [
		"p_user_id",
		"p_token"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "auth_token",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 7783,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_create_use_token ( p_user_id uuid, p_token varchar ) RETURNS text"
}
*/

type RvAuthCreateUseToken struct {
	StdErrorReturn
	UserId    string `json:"user_id,omitempty"`
	AuthToken string `json:"auth_token,omitempty"`
}

// CallAuthCreateUseToken will call q_auth_v1_create_use_token in the database.
func CallAuthCreateUseToken(c *gin.Context, userId string, token string) (rv RvAuthCreateUseToken, err error) {

	stmt := "q_auth_v1_create_use_token (  $1, $2 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..", userId, token)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_login_cleanup_fingerprint_data",
	"PList": [
		"p_fingerprint_data",
		"p_state",
		"p_user_id",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 438,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_login_cleanup_fingerprint_data ( p_fingerprint_data varchar, p_state varchar, p_user_id uuid, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthLoginCleanupFingerprintData struct {
	StdErrorReturn
}

// CallAuthLoginCleanupFingerprintData will call q_auth_v1_login_cleanup_fingerprint_data in the database.
func CallAuthLoginCleanupFingerprintData(c *gin.Context, fingerprintData string, state string, userId string) (rv RvAuthLoginCleanupFingerprintData, err error) {

	stmt := "q_auth_v1_login_cleanup_fingerprint_data (  $1, $2, $3, $4, $5 )"

	err = CallDatabaseFunction(c, &rv, stmt, "...!!", fingerprintData, state, userId, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_qr_email_to_user_id",
	"PList": [
		"p_email",
		"p_hmac_password",
		"p_userdata_password"
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 1545,
	"Line": "CREATE OR REPLACE FUNCTION q_qr_email_to_user_id ( p_email varchar,  p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

/* ============================================================================
{
	"FuncName": "u_test_proc_call",
	"PList": [
		"p_aaa",
		"p_user_id",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 3561,
	"Line": "CREATE OR REPLACE FUNCTION u_test_proc_call ( p_aaa varchar, p_user_id varchar, p_hmac_password varchar, p_userdata_password varchar) RETURNS text"
}
*/

type RvUTestProcCall struct {
	StdErrorReturn
}

// CallUTestProcCall will call u_test_proc_call in the database.
func CallUTestProcCall(c *gin.Context, aaa string, userId string) (rv RvUTestProcCall, err error) {

	stmt := "u_test_proc_call (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", aaa, userId, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_resend_email_register",
	"PList": [
		"p_email",
		"p_tmp_token",
		"p_hmac_password",
		"p_userdata_password",
		"p_n6_flag"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "email_verify_token",
			"Type": "s"
		},
		{
			"Name": "require_2fa",
			"Type": "s"
		},
		{
			"Name": "tmp_token",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		},
		{
			"Name": "n6",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 4606,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_resend_email_register ( p_email varchar, p_tmp_token varchar, p_hmac_password varchar, p_userdata_password varchar, p_n6_flag varchar ) RETURNS text"
}
*/

type RvAuthResendEmailRegister struct {
	StdErrorReturn
	UserId           string `json:"user_id,omitempty"`
	EmailVerifyToken string `json:"email_verify_token,omitempty"`
	Require2Fa       string `json:"require_2fa,omitempty"`
	TmpToken         string `json:"tmp_token,omitempty"`
	FirstName        string `json:"first_name,omitempty"`
	LastName         string `json:"last_name,omitempty"`
	N6               string `json:"n6,omitempty"`
}

// CallAuthResendEmailRegister will call q_auth_v1_resend_email_register in the database.
func CallAuthResendEmailRegister(c *gin.Context, email string, tmpToken string, n6Flag string) (rv RvAuthResendEmailRegister, err error) {

	stmt := "q_auth_v1_resend_email_register (  $1, $2, $3, $4, $5 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!.", email, tmpToken, gCfg.EncryptionPassword, gCfg.UserdataPassword, n6Flag)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_sip_register",
	"PList": [
		"p_email",
		"p_validator",
		"p_hmac_password",
		"p_first_name",
		"p_last_name",
		"p_userdata_password",
		"p_secret",
		"p_n6_flag"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "email_verify_token",
			"Type": "s"
		},
		{
			"Name": "require_2fa",
			"Type": "s"
		},
		{
			"Name": "tmp_token",
			"Type": "s"
		},
		{
			"Name": "secret_2fa",
			"Type": "s"
		},
		{
			"Name": "n6",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 4744,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_sip_register ( p_email varchar, p_validator varchar, p_hmac_password varchar, p_first_name varchar, p_last_name varchar, p_userdata_password varchar, p_secret varchar, p_n6_flag varchar ) RETURNS text"
}
*/

type RvAuthSipRegister struct {
	StdErrorReturn
	UserId           string `json:"user_id,omitempty"`
	EmailVerifyToken string `json:"email_verify_token,omitempty"`
	Require2Fa       string `json:"require_2fa,omitempty"`
	TmpToken         string `json:"tmp_token,omitempty"`
	Secret2Fa        string `json:"secret_2fa,omitempty"`
	N6               string `json:"n6,omitempty"`
}

// CallAuthSipRegister will call q_auth_v1_sip_register in the database.
func CallAuthSipRegister(c *gin.Context, email string, validator string, firstName string, lastName string, secret string, n6Flag string) (rv RvAuthSipRegister, err error) {

	stmt := "q_auth_v1_sip_register (  $1, $2, $3, $4, $5, $6, $7, $8 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!..!..", email, validator, gCfg.EncryptionPassword, firstName, lastName, gCfg.UserdataPassword, secret, n6Flag)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_logout",
	"PList": [
		"p_email",
		"p_auth_token",
		"p_hmac_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 7063,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_logout ( p_email varchar, p_auth_token varchar, p_hmac_password varchar ) RETURNS text"
}
*/

type RvAuthLogout struct {
	StdErrorReturn
}

// CallAuthLogout will call q_auth_v1_logout in the database.
func CallAuthLogout(c *gin.Context, email string, authToken string) (rv RvAuthLogout, err error) {

	stmt := "q_auth_v1_logout (  $1, $2, $3 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!", email, authToken, gCfg.EncryptionPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_get_scid",
	"PList": [
		"p_email",
		"p_auth_token",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "scid",
			"Type": "s"
		},
		{
			"Name": "valid",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 8181,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_get_scid ( p_email varchar, p_auth_token uuid, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthGetScid struct {
	StdErrorReturn
	UserId string `json:"user_id,omitempty"`
	Scid   string `json:"scid,omitempty"`
	Valid  string `json:"valid,omitempty"`
}

// CallAuthGetScid will call q_auth_v1_get_scid in the database.
func CallAuthGetScid(c *gin.Context, email string, authToken string) (rv RvAuthGetScid, err error) {

	stmt := "q_auth_v1_get_scid (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", email, authToken, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_validate_fingerprint_data",
	"PList": [
		"p_fingerprint_data",
		"p_state",
		"p_user_id",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 345,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_validate_fingerprint_data ( p_fingerprint_data varchar, p_state varchar, p_user_id uuid, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthValidateFingerprintData struct {
	StdErrorReturn
}

// CallAuthValidateFingerprintData will call q_auth_v1_validate_fingerprint_data in the database.
func CallAuthValidateFingerprintData(c *gin.Context, fingerprintData string, state string, userId string) (rv RvAuthValidateFingerprintData, err error) {

	stmt := "q_auth_v1_validate_fingerprint_data (  $1, $2, $3, $4, $5 )"

	err = CallDatabaseFunction(c, &rv, stmt, "...!!", fingerprintData, state, userId, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_register_un_pw",
	"PList": [
		"p_parent_user_id",
		"p_email",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "tmp_token",
			"Type": "s"
		},
		{
			"Name": "pw",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		},
		{
			"Name": "email",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 6336,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_register_un_pw ( p_parent_user_id uuid, p_email varchar, p_hmac_password varchar,  p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthRegisterUnPw struct {
	StdErrorReturn
	UserId    string `json:"user_id,omitempty"`
	TmpToken  string `json:"tmp_token,omitempty"`
	Pw        string `json:"pw,omitempty"`
	FirstName string `json:"first_name,omitempty"`
	LastName  string `json:"last_name,omitempty"`
	Email     string `json:"email,omitempty"`
}

// CallAuthRegisterUnPw will call q_auth_v1_register_un_pw in the database.
func CallAuthRegisterUnPw(c *gin.Context, parentUserId string, email string) (rv RvAuthRegisterUnPw, err error) {

	stmt := "q_auth_v1_register_un_pw (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", parentUserId, email, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_change_password_admin",
	"PList": [
		"p_admin_user_id",
		"p_email",
		"p_new_pw",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 5293,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_change_password_admin ( p_admin_user_id uuid, p_email varchar, p_new_pw varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthChangePasswordAdmin struct {
	StdErrorReturn
	FirstName string `json:"first_name,omitempty"`
	LastName  string `json:"last_name,omitempty"`
}

// CallAuthChangePasswordAdmin will call q_auth_v1_change_password_admin in the database.
func CallAuthChangePasswordAdmin(c *gin.Context, adminUserId string, email string, newPw string) (rv RvAuthChangePasswordAdmin, err error) {

	stmt := "q_auth_v1_change_password_admin (  $1, $2, $3, $4, $5 )"

	err = CallDatabaseFunction(c, &rv, stmt, "...!!", adminUserId, email, newPw, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_etag_device_mark",
	"PList": [
		"p_seen_id",
		"p_user_id",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "nr",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 979,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_etag_device_mark ( p_seen_id varchar, p_user_id uuid, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthEtagDeviceMark struct {
	StdErrorReturn
	Nr string `json:"nr,omitempty"`
}

// CallAuthEtagDeviceMark will call q_auth_v1_etag_device_mark in the database.
func CallAuthEtagDeviceMark(c *gin.Context, seenId string, userId string) (rv RvAuthEtagDeviceMark, err error) {

	stmt := "q_auth_v1_etag_device_mark (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", seenId, userId, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_recover_password_03_set_password",
	"PList": [
		"p_email",
		"p_new_pw",
		"p_recovery_token",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "recovery_token",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 3250,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_recover_password_03_set_password ( p_email varchar, p_new_pw varchar, p_recovery_token varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthRecoverPassword03SetPassword struct {
	StdErrorReturn
	RecoveryToken string `json:"recovery_token,omitempty"`
	FirstName     string `json:"first_name,omitempty"`
	LastName      string `json:"last_name,omitempty"`
}

// CallAuthRecoverPassword03SetPassword will call q_auth_v1_recover_password_03_set_password in the database.
func CallAuthRecoverPassword03SetPassword(c *gin.Context, email string, newPw string, recoveryToken string) (rv RvAuthRecoverPassword03SetPassword, err error) {

	stmt := "q_auth_v1_recover_password_03_set_password (  $1, $2, $3, $4, $5 )"

	err = CallDatabaseFunction(c, &rv, stmt, "...!!", email, newPw, recoveryToken, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_refresh_token",
	"PList": [
		"p_user_id",
		"p_auth_token",
		"p_am_i_known",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "auth_token",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "account_type",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		},
		{
			"Name": "email_address",
			"Type": "s"
		},
		{
			"Name": "acct_state",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 6743,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_refresh_token ( p_user_id varchar, p_auth_token varchar, p_am_i_known varchar, p_hmac_password varchar,  p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthRefreshToken struct {
	StdErrorReturn
	AuthToken    string `json:"auth_token,omitempty"`
	UserId       string `json:"user_id,omitempty"`
	AccountType  string `json:"account_type,omitempty"`
	FirstName    string `json:"first_name,omitempty"`
	LastName     string `json:"last_name,omitempty"`
	EmailAddress string `json:"email_address,omitempty"`
	AcctState    string `json:"acct_state,omitempty"`
}

// CallAuthRefreshToken will call q_auth_v1_refresh_token in the database.
func CallAuthRefreshToken(c *gin.Context, userId string, authToken string, amIKnown string) (rv RvAuthRefreshToken, err error) {

	stmt := "q_auth_v1_refresh_token (  $1, $2, $3, $4, $5 )"

	err = CallDatabaseFunction(c, &rv, stmt, "...!!", userId, authToken, amIKnown, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_set_client",
	"PList": [
		"p_email",
		"p_client_name",
		"p_hmac_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "client_id",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 7649,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_set_client ( p_email varchar, p_client_name varchar, p_hmac_password varchar ) RETURNS text"
}
*/

type RvAuthSetClient struct {
	StdErrorReturn
	ClientId string `json:"client_id,omitempty"`
}

// CallAuthSetClient will call q_auth_v1_set_client in the database.
func CallAuthSetClient(c *gin.Context, email string, clientName string) (rv RvAuthSetClient, err error) {

	stmt := "q_auth_v1_set_client (  $1, $2, $3 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!", email, clientName, gCfg.EncryptionPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_xsrf_setup",
	"PList": [
		"p_id",
		"p_ref",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 548,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_xsrf_setup ( p_id uuid, p_ref varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthXsrfSetup struct {
	StdErrorReturn
}

// CallAuthXsrfSetup will call q_auth_v1_xsrf_setup in the database.
func CallAuthXsrfSetup(c *gin.Context, id string, ref string) (rv RvAuthXsrfSetup, err error) {

	stmt := "q_auth_v1_xsrf_setup (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", id, ref, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_admin_create_token_registration",
	"PList": [
		"p_description",
		"p_client_id",
		"p_role_name",
		"p_email_note",
		"p_user_id",
		"p_admin_email",
		"p_application_url",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "client_id",
			"Type": "s"
		},
		{
			"Name": "registration_token",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 2640,
	"Line": "CREATE OR REPLACE FUNCTION q_admin_create_token_registration ( p_description varchar, p_client_id varchar, p_role_name varchar, p_email_note varchar, p_user_id uuid, p_admin_email varchar, p_application_url varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvQAdminCreateTokenRegistration struct {
	StdErrorReturn
	ClientId          string `json:"client_id,omitempty"`
	RegistrationToken string `json:"registration_token,omitempty"`
}

// CallQAdminCreateTokenRegistration will call q_admin_create_token_registration in the database.
func CallQAdminCreateTokenRegistration(c *gin.Context, description string, clientId string, roleName string, emailNote string, userId string, adminEmail string, applicationUrl string) (rv RvQAdminCreateTokenRegistration, err error) {

	stmt := "q_admin_create_token_registration (  $1, $2, $3, $4, $5, $6, $7, $8, $9 )"

	err = CallDatabaseFunction(c, &rv, stmt, ".......!!", description, clientId, roleName, emailNote, userId, adminEmail, applicationUrl, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_regen_otp",
	"PList": [
		"p_email",
		"p_pw",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 6240,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_regen_otp ( p_email varchar, p_pw varchar, p_hmac_password varchar , p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthRegenOtp struct {
	StdErrorReturn
	UserId    string `json:"user_id,omitempty"`
	FirstName string `json:"first_name,omitempty"`
	LastName  string `json:"last_name,omitempty"`
}

// CallAuthRegenOtp will call q_auth_v1_regen_otp in the database.
func CallAuthRegenOtp(c *gin.Context, email string, pw string) (rv RvAuthRegenOtp, err error) {

	stmt := "q_auth_v1_regen_otp (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", email, pw, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_validate_startup_passwords",
	"PList": [
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 783,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_validate_startup_passwords ( p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthValidateStartupPasswords struct {
	StdErrorReturn
}

// CallAuthValidateStartupPasswords will call q_auth_v1_validate_startup_passwords in the database.
func CallAuthValidateStartupPasswords(c *gin.Context) (rv RvAuthValidateStartupPasswords, err error) {

	stmt := "q_auth_v1_validate_startup_passwords (  $1, $2 )"

	err = CallDatabaseFunction(c, &rv, stmt, "!!", gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_uploaded_files",
	"PList": [
		"p_id",
		"p_original_file_name",
		"p_content_type",
		"p_size",
		"p_file_hash",
		"p_group_id",
		"p_local_file_path",
		"p_image_confirmed",
		"p_url_path",
		"p_user_id"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 1100,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_uploaded_files ( p_id uuid, p_original_file_name varchar, p_content_type varchar, p_size int, p_file_hash varchar, p_group_id varchar, p_local_file_path varchar, p_image_confirmed varchar, p_url_path varchar, p_user_id varchar ) RETURNS text"
}
*/

type RvAuthUploadedFiles struct {
	StdErrorReturn
}

// CallAuthUploadedFiles will call q_auth_v1_uploaded_files in the database.
func CallAuthUploadedFiles(c *gin.Context, id string, originalFileName string, contentType string, size string, fileHash string, groupId string, localFilePath string, imageConfirmed string, urlPath string, userId string) (rv RvAuthUploadedFiles, err error) {

	stmt := "q_auth_v1_uploaded_files (  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..........", id, originalFileName, contentType, size, fileHash, groupId, localFilePath, imageConfirmed, urlPath, userId)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_register_client",
	"PList": [
		"p_email",
		"p_pw",
		"p_hmac_password",
		"p_first_name",
		"p_last_name",
		"p_userdata_password",
		"p_secret",
		"p_registration_token",
		"p_n6_flag"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "email_verify_token",
			"Type": "s"
		},
		{
			"Name": "require_2fa",
			"Type": "s"
		},
		{
			"Name": "tmp_token",
			"Type": "s"
		},
		{
			"Name": "secret_2fa",
			"Type": "s"
		},
		{
			"Name": "n6",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 3998,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_register_client ( p_email varchar, p_pw varchar, p_hmac_password varchar, p_first_name varchar, p_last_name varchar, p_userdata_password varchar, p_secret varchar, p_registration_token uuid, p_n6_flag varchar ) RETURNS text"
}
*/

type RvAuthRegisterClient struct {
	StdErrorReturn
	UserId           string `json:"user_id,omitempty"`
	EmailVerifyToken string `json:"email_verify_token,omitempty"`
	Require2Fa       string `json:"require_2fa,omitempty"`
	TmpToken         string `json:"tmp_token,omitempty"`
	Secret2Fa        string `json:"secret_2fa,omitempty"`
	N6               string `json:"n6,omitempty"`
}

// CallAuthRegisterClient will call q_auth_v1_register_client in the database.
func CallAuthRegisterClient(c *gin.Context, email string, pw string, firstName string, lastName string, secret string, registrationToken string, n6Flag string) (rv RvAuthRegisterClient, err error) {

	stmt := "q_auth_v1_register_client (  $1, $2, $3, $4, $5, $6, $7, $8, $9 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!..!...", email, pw, gCfg.EncryptionPassword, firstName, lastName, gCfg.UserdataPassword, secret, registrationToken, n6Flag)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_2fa_get_secret",
	"PList": [
		"p_email",
		"p_hmac_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "secret_2fa",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "client_id",
			"Type": "s"
		},
		{
			"Name": "require_2fa",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 7418,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_2fa_get_secret ( p_email varchar, p_hmac_password varchar ) RETURNS text"
}
*/

type RvAuth2FaGetSecret struct {
	StdErrorReturn
	Secret2Fa  string `json:"secret_2fa,omitempty"`
	UserId     string `json:"user_id,omitempty"`
	ClientId   string `json:"client_id,omitempty"`
	Require2Fa string `json:"require_2fa,omitempty"`
}

// CallAuth2FaGetSecret will call q_auth_v1_2fa_get_secret in the database.
func CallAuth2FaGetSecret(c *gin.Context, email string) (rv RvAuth2FaGetSecret, err error) {

	stmt := "q_auth_v1_2fa_get_secret (  $1, $2 )"

	err = CallDatabaseFunction(c, &rv, stmt, ".!", email, gCfg.EncryptionPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_change_account_info",
	"PList": [
		"p_user_id",
		"p_first_name",
		"p_last_name",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 8034,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_change_account_info ( p_user_id uuid, p_first_name varchar, p_last_name varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthChangeAccountInfo struct {
	StdErrorReturn
	FirstName string `json:"first_name,omitempty"`
	LastName  string `json:"last_name,omitempty"`
}

// CallAuthChangeAccountInfo will call q_auth_v1_change_account_info in the database.
func CallAuthChangeAccountInfo(c *gin.Context, userId string, firstName string, lastName string) (rv RvAuthChangeAccountInfo, err error) {

	stmt := "q_auth_v1_change_account_info (  $1, $2, $3, $4, $5 )"

	err = CallDatabaseFunction(c, &rv, stmt, "...!!", userId, firstName, lastName, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_validate_xsrf_id",
	"PList": [
		"p_id",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 489,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_validate_xsrf_id ( p_id uuid, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthValidateXsrfId struct {
	StdErrorReturn
}

// CallAuthValidateXsrfId will call q_auth_v1_validate_xsrf_id in the database.
func CallAuthValidateXsrfId(c *gin.Context, id string) (rv RvAuthValidateXsrfId, err error) {

	stmt := "q_auth_v1_validate_xsrf_id (  $1, $2, $3 )"

	err = CallDatabaseFunction(c, &rv, stmt, ".!!", id, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_delete_account",
	"PList": [
		"p_email",
		"p_pw",
		"p_hmac_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 3422,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_delete_account ( p_email varchar, p_pw varchar, p_hmac_password varchar ) RETURNS text"
}
*/

type RvAuthDeleteAccount struct {
	StdErrorReturn
	FirstName string `json:"first_name,omitempty"`
	LastName  string `json:"last_name,omitempty"`
}

// CallAuthDeleteAccount will call q_auth_v1_delete_account in the database.
func CallAuthDeleteAccount(c *gin.Context, email string, pw string) (rv RvAuthDeleteAccount, err error) {

	stmt := "q_auth_v1_delete_account (  $1, $2, $3 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!", email, pw, gCfg.EncryptionPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_get_user_config",
	"PList": [
		"p_user_id",
		"p_param_name",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "value",
			"Type": "s"
		},
		{
			"Name": "config_id",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 8463,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_get_user_config ( p_user_id uuid, p_param_name varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthGetUserConfig struct {
	StdErrorReturn
	Value    string `json:"value,omitempty"`
	ConfigId string `json:"config_id,omitempty"`
}

// CallAuthGetUserConfig will call q_auth_v1_get_user_config in the database.
func CallAuthGetUserConfig(c *gin.Context, userId string, paramName string) (rv RvAuthGetUserConfig, err error) {

	stmt := "q_auth_v1_get_user_config (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", userId, paramName, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_requires_2fa",
	"PList": [
		"p_email",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "require_2fa",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 7911,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_requires_2fa ( p_email varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthRequires2Fa struct {
	StdErrorReturn
	UserId     string `json:"user_id,omitempty"`
	Require2Fa string `json:"require_2fa,omitempty"`
}

// CallAuthRequires2Fa will call q_auth_v1_requires_2fa in the database.
func CallAuthRequires2Fa(c *gin.Context, email string) (rv RvAuthRequires2Fa, err error) {

	stmt := "q_auth_v1_requires_2fa (  $1, $2, $3 )"

	err = CallDatabaseFunction(c, &rv, stmt, ".!!", email, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_get_email_from_auth_token",
	"PList": [
		"p_auth_token",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "scid",
			"Type": "s"
		},
		{
			"Name": "email",
			"Type": "s"
		},
		{
			"Name": "valid",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 8240,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_get_email_from_auth_token ( p_auth_token uuid, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthGetEmailFromAuthToken struct {
	StdErrorReturn
	UserId string `json:"user_id,omitempty"`
	Scid   string `json:"scid,omitempty"`
	Email  string `json:"email,omitempty"`
	Valid  string `json:"valid,omitempty"`
}

// CallAuthGetEmailFromAuthToken will call q_auth_v1_get_email_from_auth_token in the database.
func CallAuthGetEmailFromAuthToken(c *gin.Context, authToken string) (rv RvAuthGetEmailFromAuthToken, err error) {

	stmt := "q_auth_v1_get_email_from_auth_token (  $1, $2, $3 )"

	err = CallDatabaseFunction(c, &rv, stmt, ".!!", authToken, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_qr_admin_HasPriv_user_id",
	"PList": [
		"p_user_id",
		"p_priv_needed"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 2275,
	"Line": "CREATE OR REPLACE FUNCTION q_qr_admin_HasPriv_user_id ( p_user_id uuid, p_priv_needed varchar ) RETURNS text"
}
*/

type RvQQrAdminHasPrivUserId struct {
	StdErrorReturn
}

// CallQQrAdminHasPrivUserId will call q_qr_admin_HasPriv_user_id in the database.
func CallQQrAdminHasPrivUserId(c *gin.Context, userId string, privNeeded string) (rv RvQQrAdminHasPrivUserId, err error) {

	stmt := "q_qr_admin_HasPriv_user_id (  $1, $2 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..", userId, privNeeded)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_recover_password_01_setup",
	"PList": [
		"p_email",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "recovery_token",
			"Type": "s"
		},
		{
			"Name": "recovery_token_n6",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		},
		{
			"Name": "n6_flag",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 3021,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_recover_password_01_setup ( p_email varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthRecoverPassword01Setup struct {
	StdErrorReturn
	RecoveryToken   string `json:"recovery_token,omitempty"`
	RecoveryTokenN6 string `json:"recovery_token_n6,omitempty"`
	FirstName       string `json:"first_name,omitempty"`
	LastName        string `json:"last_name,omitempty"`
	N6Flag          string `json:"n6_flag,omitempty"`
}

// CallAuthRecoverPassword01Setup will call q_auth_v1_recover_password_01_setup in the database.
func CallAuthRecoverPassword01Setup(c *gin.Context, email string) (rv RvAuthRecoverPassword01Setup, err error) {

	stmt := "q_auth_v1_recover_password_01_setup (  $1, $2, $3 )"

	err = CallDatabaseFunction(c, &rv, stmt, ".!!", email, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_register",
	"PList": [
		"p_email",
		"p_pw",
		"p_hmac_password",
		"p_first_name",
		"p_last_name",
		"p_userdata_password",
		"p_secret",
		"p_n6_flag",
		"p_agree_eula",
		"p_agree_tos"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "email_verify_token",
			"Type": "s"
		},
		{
			"Name": "require_2fa",
			"Type": "s"
		},
		{
			"Name": "tmp_token",
			"Type": "s"
		},
		{
			"Name": "secret_2fa",
			"Type": "s"
		},
		{
			"Name": "n6",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 3695,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_register ( p_email varchar, p_pw varchar, p_hmac_password varchar, p_first_name varchar, p_last_name varchar, p_userdata_password varchar, p_secret varchar, p_n6_flag varchar, p_agree_eula varchar, p_agree_tos varchar ) RETURNS text"
}
*/

type RvAuthRegister struct {
	StdErrorReturn
	UserId           string `json:"user_id,omitempty"`
	EmailVerifyToken string `json:"email_verify_token,omitempty"`
	Require2Fa       string `json:"require_2fa,omitempty"`
	TmpToken         string `json:"tmp_token,omitempty"`
	Secret2Fa        string `json:"secret_2fa,omitempty"`
	N6               string `json:"n6,omitempty"`
}

// CallAuthRegister will call q_auth_v1_register in the database.
func CallAuthRegister(c *gin.Context, email string, pw string, firstName string, lastName string, secret string, n6Flag string, agreeEula string, agreeTos string) (rv RvAuthRegister, err error) {

	stmt := "q_auth_v1_register (  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!..!....", email, pw, gCfg.EncryptionPassword, firstName, lastName, gCfg.UserdataPassword, secret, n6Flag, agreeEula, agreeTos)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_register_resend_email_link",
	"PList": [
		"p_email",
		"p_old_email_verify_token",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "email_verify_token",
			"Type": "s"
		},
		{
			"Name": "require_2fa",
			"Type": "s"
		},
		{
			"Name": "tmp_token",
			"Type": "s"
		},
		{
			"Name": "n6",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 4975,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_register_resend_email_link ( p_email varchar, p_old_email_verify_token varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthRegisterResendEmailLink struct {
	StdErrorReturn
	EmailVerifyToken string `json:"email_verify_token,omitempty"`
	Require2Fa       string `json:"require_2fa,omitempty"`
	TmpToken         string `json:"tmp_token,omitempty"`
	N6               string `json:"n6,omitempty"`
}

// CallAuthRegisterResendEmailLink will call q_auth_v1_register_resend_email_link in the database.
func CallAuthRegisterResendEmailLink(c *gin.Context, email string, oldEmailVerifyToken string) (rv RvAuthRegisterResendEmailLink, err error) {

	stmt := "q_auth_v1_register_resend_email_link (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", email, oldEmailVerifyToken, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_setup_2fa_test",
	"PList": [
		"p_user_id",
		"p_hmac_password",
		"p_userdata_password"
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 7102,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_setup_2fa_test ( p_user_id uuid, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

/* ============================================================================
{
	"FuncName": "q_auth_v1_get_all_tokens",
	"PList": [
		"p_auth_token",
		"p_delete_act",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "token_list",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 8286,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_get_all_tokens ( p_auth_token uuid, p_delete_act varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthGetAllTokens struct {
	StdErrorReturn
	UserId    string `json:"user_id,omitempty"`
	TokenList string `json:"token_list,omitempty"`
}

// CallAuthGetAllTokens will call q_auth_v1_get_all_tokens in the database.
func CallAuthGetAllTokens(c *gin.Context, authToken string, deleteAct string) (rv RvAuthGetAllTokens, err error) {

	stmt := "q_auth_v1_get_all_tokens (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", authToken, deleteAct, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_etag_seen",
	"PList": [
		"p_id",
		"p_etag",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "id",
			"Type": "s"
		},
		{
			"Name": "etag",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 877,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_etag_seen ( p_id varchar, p_etag varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthEtagSeen struct {
	StdErrorReturn
	UserId string `json:"user_id,omitempty"`
	Id     string `json:"id,omitempty"`
	Etag   string `json:"etag,omitempty"`
}

// CallAuthEtagSeen will call q_auth_v1_etag_seen in the database.
func CallAuthEtagSeen(c *gin.Context, id string, etag string) (rv RvAuthEtagSeen, err error) {

	stmt := "q_auth_v1_etag_seen (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", id, etag, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_register_token",
	"PList": [
		"p_parent_user_id",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "tmp_token",
			"Type": "s"
		},
		{
			"Name": "login_token",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		},
		{
			"Name": "email",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 6530,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_register_token ( p_parent_user_id uuid,  p_hmac_password varchar,  p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthRegisterToken struct {
	StdErrorReturn
	UserId     string `json:"user_id,omitempty"`
	TmpToken   string `json:"tmp_token,omitempty"`
	LoginToken string `json:"login_token,omitempty"`
	FirstName  string `json:"first_name,omitempty"`
	LastName   string `json:"last_name,omitempty"`
	Email      string `json:"email,omitempty"`
}

// CallAuthRegisterToken will call q_auth_v1_register_token in the database.
func CallAuthRegisterToken(c *gin.Context, parentUserId string) (rv RvAuthRegisterToken, err error) {

	stmt := "q_auth_v1_register_token (  $1, $2, $3 )"

	err = CallDatabaseFunction(c, &rv, stmt, ".!!", parentUserId, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_email_verify",
	"PList": [
		"p_email_verify_token",
		"p_hmac_password",
		"p_userdata_password",
		"p_n6_flag"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "email",
			"Type": "s"
		},
		{
			"Name": "tmp_token",
			"Type": "s"
		},
		{
			"Name": "auth_token",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 6904,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_email_verify ( p_email_verify_token varchar, p_hmac_password varchar, p_userdata_password varchar, p_n6_flag varchar ) RETURNS text"
}
*/

type RvAuthEmailVerify struct {
	StdErrorReturn
	Email     string `json:"email,omitempty"`
	TmpToken  string `json:"tmp_token,omitempty"`
	AuthToken string `json:"auth_token,omitempty"`
	UserId    string `json:"user_id,omitempty"`
}

// CallAuthEmailVerify will call q_auth_v1_email_verify in the database.
func CallAuthEmailVerify(c *gin.Context, emailVerifyToken string, n6Flag string) (rv RvAuthEmailVerify, err error) {

	stmt := "q_auth_v1_email_verify (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, ".!!.", emailVerifyToken, gCfg.EncryptionPassword, gCfg.UserdataPassword, n6Flag)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_cleanup_old_data",
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 8123,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_cleanup_old_data ( ) RETURNS text"
}
*/

/* ============================================================================
{
	"FuncName": "q_auth_v1_get_user_from_tmp_token",
	"PList": [
		"p_tmp_token",
		"p_email",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "auth_token",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "sc_id",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 8384,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_get_user_from_tmp_token ( p_tmp_token uuid, p_email varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthGetUserFromTmpToken struct {
	StdErrorReturn
	AuthToken string `json:"auth_token,omitempty"`
	UserId    string `json:"user_id,omitempty"`
	ScId      string `json:"sc_id,omitempty"`
}

// CallAuthGetUserFromTmpToken will call q_auth_v1_get_user_from_tmp_token in the database.
func CallAuthGetUserFromTmpToken(c *gin.Context, tmpToken string, email string) (rv RvAuthGetUserFromTmpToken, err error) {

	stmt := "q_auth_v1_get_user_from_tmp_token (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", tmpToken, email, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_get_config",
	"PList": [
		"p_name"
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 267,
	"Line": "CREATE OR REPLACE FUNCTION q_get_config ( p_name varchar ) RETURNS text"
}
*/

/* ============================================================================
{
	"FuncName": "q_auth_v1_recover_password_02_fetch_info",
	"PList": [
		"p_email",
		"p_recovery_token",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "email",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		},
		{
			"Name": "require_2fa",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 3157,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_recover_password_02_fetch_info ( p_email varchar, p_recovery_token varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthRecoverPassword02FetchInfo struct {
	StdErrorReturn
	Email      string `json:"email,omitempty"`
	FirstName  string `json:"first_name,omitempty"`
	LastName   string `json:"last_name,omitempty"`
	Require2Fa string `json:"require_2fa,omitempty"`
}

// CallAuthRecoverPassword02FetchInfo will call q_auth_v1_recover_password_02_fetch_info in the database.
func CallAuthRecoverPassword02FetchInfo(c *gin.Context, email string, recoveryToken string) (rv RvAuthRecoverPassword02FetchInfo, err error) {

	stmt := "q_auth_v1_recover_password_02_fetch_info (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", email, recoveryToken, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_change_password_root_cli",
	"PList": [
		"p_email",
		"p_new_pw",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 5384,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_change_password_root_cli ( p_email varchar, p_new_pw varchar, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthChangePasswordRootCli struct {
	StdErrorReturn
	FirstName string `json:"first_name,omitempty"`
	LastName  string `json:"last_name,omitempty"`
}

// CallAuthChangePasswordRootCli will call q_auth_v1_change_password_root_cli in the database.
func CallAuthChangePasswordRootCli(c *gin.Context, email string, newPw string) (rv RvAuthChangePasswordRootCli, err error) {

	stmt := "q_auth_v1_change_password_root_cli (  $1, $2, $3, $4 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!!", email, newPw, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_set_user_config",
	"PList": [
		"p_name",
		"p_value",
		"p_user_id",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_config",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 6157,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_set_user_config ( p_name varchar, p_value varchar, p_user_id uuid, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthSetUserConfig struct {
	StdErrorReturn
	UserConfig string `json:"user_config,omitempty"`
}

// CallAuthSetUserConfig will call q_auth_v1_set_user_config in the database.
func CallAuthSetUserConfig(c *gin.Context, name string, value string, userId string) (rv RvAuthSetUserConfig, err error) {

	stmt := "q_auth_v1_set_user_config (  $1, $2, $3, $4, $5 )"

	err = CallDatabaseFunction(c, &rv, stmt, "...!!", name, value, userId, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_qr_admin_HasPriv_email",
	"PList": [
		"p_email",
		"p_priv_needed",
		"p_hmac_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 2312,
	"Line": "CREATE OR REPLACE FUNCTION q_qr_admin_HasPriv_email ( p_email text, p_priv_needed varchar, p_hmac_password varchar ) RETURNS text"
}
*/

type RvQQrAdminHasPrivEmail struct {
	StdErrorReturn
}

// CallQQrAdminHasPrivEmail will call q_qr_admin_HasPriv_email in the database.
func CallQQrAdminHasPrivEmail(c *gin.Context, email string, privNeeded string) (rv RvQQrAdminHasPrivEmail, err error) {

	stmt := "q_qr_admin_HasPriv_email (  $1, $2, $3 )"

	err = CallDatabaseFunction(c, &rv, stmt, "..!", email, privNeeded, gCfg.EncryptionPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_change_email_address",
	"PList": [
		"p_old_email",
		"p_new_email",
		"p_pw",
		"p_user_id",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 7482,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_change_email_address ( p_old_email varchar, p_new_email varchar, p_pw varchar, p_user_id uuid, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthChangeEmailAddress struct {
	StdErrorReturn
	FirstName string `json:"first_name,omitempty"`
	LastName  string `json:"last_name,omitempty"`
}

// CallAuthChangeEmailAddress will call q_auth_v1_change_email_address in the database.
func CallAuthChangeEmailAddress(c *gin.Context, oldEmail string, newEmail string, pw string, userId string) (rv RvAuthChangeEmailAddress, err error) {

	stmt := "q_auth_v1_change_email_address (  $1, $2, $3, $4, $5, $6 )"

	err = CallDatabaseFunction(c, &rv, stmt, "....!!", oldEmail, newEmail, pw, userId, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_valid_use_token",
	"PList": [
		"p_token"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "auth_token",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 7740,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_valid_use_token ( p_token varchar ) RETURNS text"
}
*/

type RvAuthValidUseToken struct {
	StdErrorReturn
	UserId    string `json:"user_id,omitempty"`
	AuthToken string `json:"auth_token,omitempty"`
}

// CallAuthValidUseToken will call q_auth_v1_valid_use_token in the database.
func CallAuthValidUseToken(c *gin.Context, token string) (rv RvAuthValidUseToken, err error) {

	stmt := "q_auth_v1_valid_use_token (  $1 )"

	err = CallDatabaseFunction(c, &rv, stmt, ".", token)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_get_user_info",
	"PList": [
		"p_user_id",
		"p_hmac_password",
		"p_userdata_password"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "email",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 7964,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_get_user_info ( p_user_id uuid, p_hmac_password varchar, p_userdata_password varchar ) RETURNS text"
}
*/

type RvAuthGetUserInfo struct {
	StdErrorReturn
	Email     string `json:"email,omitempty"`
	FirstName string `json:"first_name,omitempty"`
	LastName  string `json:"last_name,omitempty"`
}

// CallAuthGetUserInfo will call q_auth_v1_get_user_info in the database.
func CallAuthGetUserInfo(c *gin.Context, userId string) (rv RvAuthGetUserInfo, err error) {

	stmt := "q_auth_v1_get_user_info (  $1, $2, $3 )"

	err = CallDatabaseFunction(c, &rv, stmt, ".!!", userId, gCfg.EncryptionPassword, gCfg.UserdataPassword)
	if err != nil {
		return
	}

	return

}

/* ============================================================================
{
	"FuncName": "q_auth_v1_login",
	"PList": [
		"p_email",
		"p_pw",
		"p_am_i_known",
		"p_hmac_password",
		"p_userdata_password",
		"p_fingerprint",
		"p_sc_id",
		"p_hash_of_headers",
		"p_xsrf_id"
	],
	"RetValList": [
		{
			"Name": "status",
			"Type": "s"
		},
		{
			"Name": "user_id",
			"Type": "s"
		},
		{
			"Name": "auth_token",
			"Type": "s"
		},
		{
			"Name": "tmp_token",
			"Type": "s"
		},
		{
			"Name": "require_2fa",
			"Type": "s"
		},
		{
			"Name": "secret_2fa",
			"Type": "s"
		},
		{
			"Name": "account_type",
			"Type": "s"
		},
		{
			"Name": "privileges",
			"Type": "s"
		},
		{
			"Name": "user_config",
			"Type": "s"
		},
		{
			"Name": "first_name",
			"Type": "s"
		},
		{
			"Name": "last_name",
			"Type": "s"
		},
		{
			"Name": "client_id",
			"Type": "s"
		},
		{
			"Name": "acct_state",
			"Type": "s"
		}
	],
	"File": "/Users/philip/go/src/github.com/pschlump/gintools/jwt_auth/ddl/001.tables.m4.sql",
	"LineNo": 5486,
	"Line": "CREATE OR REPLACE FUNCTION q_auth_v1_login ( p_email varchar, p_pw varchar, p_am_i_known varchar, p_hmac_password varchar, p_userdata_password varchar, p_fingerprint varchar, p_sc_id varchar, p_hash_of_headers varchar, p_xsrf_id varchar ) RETURNS text"
}
*/

type RvAuthLogin struct {
	StdErrorReturn
	UserId      string `json:"user_id,omitempty"`
	AuthToken   string `json:"auth_token,omitempty"`
	TmpToken    string `json:"tmp_token,omitempty"`
	Require2Fa  string `json:"require_2fa,omitempty"`
	Secret2Fa   string `json:"secret_2fa,omitempty"`
	AccountType string `json:"account_type,omitempty"`
	Privileges  string `json:"privileges,omitempty"`
	UserConfig  string `json:"user_config,omitempty"`
	FirstName   string `json:"first_name,omitempty"`
	LastName    string `json:"last_name,omitempty"`
	ClientId    string `json:"client_id,omitempty"`
	AcctState   string `json:"acct_state,omitempty"`
}

// CallAuthLogin will call q_auth_v1_login in the database.
func CallAuthLogin(c *gin.Context, email string, pw string, amIKnown string, fingerprint string, scId string, hashOfHeaders string, xsrfId string) (rv RvAuthLogin, err error) {

	stmt := "q_auth_v1_login (  $1, $2, $3, $4, $5, $6, $7, $8, $9 )"

	err = CallDatabaseFunction(c, &rv, stmt, "...!!....", email, pw, amIKnown, gCfg.EncryptionPassword, gCfg.UserdataPassword, fingerprint, scId, hashOfHeaders, xsrfId)
	if err != nil {
		return
	}

	return

}

/* vim: set noai ts=4 sw=4: */
